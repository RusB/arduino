/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rusb.flashspi;

import gnu.io.CommPortIdentifier;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.table.TableColumn;

/**
 *
 * @author bryhljaev
 */
public class MainJFrame extends javax.swing.JFrame {

    private final ExecutorService executorService = Executors.newSingleThreadExecutor();
    private final FlashTableModel tableModel = new FlashTableModel();

    private boolean isStop;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        tableModel.setQuantityOfBlocks(64);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JToolBar jToolBar1 = new JToolBar();
        JButton jButtonFileLoad = new JButton();
        JButton jButtonFileSave = new JButton();
        Box.Filler filler1 = new Box.Filler(new Dimension(40, 0), new Dimension(40, 0), new Dimension(0, 0));
        jButtonFlashRead = new JButton();
        jButtonFlashWrite = new JButton();
        JButton jButtonFlashVerify = new JButton();
        Box.Filler filler2 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(20, 32767));
        jButtonFlashErase = new JButton();
        Box.Filler filler3 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(20, 32767));
        JButton jButtonFlashTest = new JButton();
        JLabel jLabel1 = new JLabel();
        jComboBoxCommPort = new JComboBox<>();
        addCommPorts(jComboBoxCommPort);
        JButton jButtonFlashStop = new JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        JTable jTable1 = new JTable();
        JPanel jPanel1 = new JPanel();
        jProgressBar1 = new JProgressBar();
        jLabelInfo = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flash SPI");

        jToolBar1.setFloatable(false);
        jToolBar1.setFocusable(false);
        jToolBar1.setNextFocusableComponent(jTable1);

        jButtonFileLoad.setText("Загрузить");
        jButtonFileLoad.setFocusable(false);
        jButtonFileLoad.setHorizontalTextPosition(SwingConstants.CENTER);
        jButtonFileLoad.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButtonFileLoad.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFileLoadActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFileLoad);

        jButtonFileSave.setText("Сохранить");
        jButtonFileSave.setFocusable(false);
        jButtonFileSave.setHorizontalTextPosition(SwingConstants.CENTER);
        jButtonFileSave.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButtonFileSave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFileSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFileSave);
        jToolBar1.add(filler1);

        jButtonFlashRead.setText("Считать");
        jButtonFlashRead.setFocusable(false);
        jButtonFlashRead.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFlashReadActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFlashRead);

        jButtonFlashWrite.setText("Записать");
        jButtonFlashWrite.setFocusable(false);
        jButtonFlashWrite.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFlashWriteActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFlashWrite);

        jButtonFlashVerify.setText("Сравнить");
        jButtonFlashVerify.setFocusable(false);
        jButtonFlashVerify.setHorizontalTextPosition(SwingConstants.CENTER);
        jButtonFlashVerify.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButtonFlashVerify.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFlashVerifyActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFlashVerify);
        jToolBar1.add(filler2);

        jButtonFlashErase.setText("Очистить");
        jButtonFlashErase.setFocusable(false);
        jButtonFlashErase.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFlashEraseActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFlashErase);
        jToolBar1.add(filler3);

        jButtonFlashTest.setText("Проверить IC");
        jButtonFlashTest.setFocusable(false);
        jButtonFlashTest.setHorizontalTextPosition(SwingConstants.CENTER);
        jButtonFlashTest.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButtonFlashTest.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFlashTestActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFlashTest);

        jLabel1.setText("Порт");
        jToolBar1.add(jLabel1);

        jComboBoxCommPort.setFocusable(false);
        jComboBoxCommPort.setPreferredSize(new Dimension(150, 25));
        jToolBar1.add(jComboBoxCommPort);

        jButtonFlashStop.setText("Стоп");
        jButtonFlashStop.setFocusable(false);
        jButtonFlashStop.setHorizontalTextPosition(SwingConstants.CENTER);
        jButtonFlashStop.setVerticalTextPosition(SwingConstants.BOTTOM);
        jButtonFlashStop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFlashStopActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFlashStop);

        getContentPane().add(jToolBar1, BorderLayout.PAGE_START);

        jScrollPane1.setPreferredSize(new Dimension(900, 700));

        jTable1.setModel(tableModel);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setFocusCycleRoot(true);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        setColumnsWidth(jTable1);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, BorderLayout.CENTER);

        jPanel1.setLayout(new FlowLayout(FlowLayout.LEADING));
        jPanel1.add(jProgressBar1);
        jPanel1.add(jLabelInfo);

        getContentPane().add(jPanel1, BorderLayout.PAGE_END);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFileLoadActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFileLoadActionPerformed
        JFileChooser fc = new JFileChooser();
        if (JFileChooser.APPROVE_OPTION == fc.showOpenDialog(this)) {
            load(fc.getSelectedFile().toPath());
        }
    }//GEN-LAST:event_jButtonFileLoadActionPerformed

    void load(Path path) {
        try (BufferedInputStream bis = new BufferedInputStream(
                Files.newInputStream(path), 16 * 4 * 1024)) {
            int r = 0, c = 0;
            do {
                byte[] bs = new byte[4 * 1024];
                int len = bis.read(bs);
                if (len <= 0) {
                    break;
                }

                tableModel.setValueAt(new SectorData(bs), r, 1 + c);

                if (++c >= ArduinoSpiEeprom.numSectors) {
                    c = 0;
                    ++r;
                }
            } while (true);
        } catch (Exception ex) {
            Logger.getLogger(FlashTableModel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jButtonFileSaveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFileSaveActionPerformed
        JFileChooser fc = new JFileChooser();
        if (JFileChooser.APPROVE_OPTION == fc.showSaveDialog(this)) {
            save(fc.getSelectedFile().toPath());
        }
    }//GEN-LAST:event_jButtonFileSaveActionPerformed

    void save(Path path) {
        try (BufferedOutputStream bos = new BufferedOutputStream(
                Files.newOutputStream(path,
                        StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING), 16 * 4 * 1024)) {
            for (int b = 0; b < 64; ++b) {
                for (int s = 0; s < 16; ++s) {
                    byte[] bs = tableModel.getSectorData(b, s).getBytes();
                    bos.write(bs);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(FlashTableModel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jButtonFlashEraseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFlashEraseActionPerformed
        CommPortIdentifier cpi = getCommPortIdentifier();
        executorService.execute(() -> {
            ArduinoSpiEeprom spi = new ArduinoSpiEeprom(cpi);
            spi.flashErase(this, tableModel);
            spi.flashRead(this, tableModel);
        });
    }//GEN-LAST:event_jButtonFlashEraseActionPerformed

    private void jButtonFlashReadActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFlashReadActionPerformed
        CommPortIdentifier cpi = getCommPortIdentifier();
        executorService.execute(() -> {
            isStop = false;
            new ArduinoSpiEeprom(cpi)
                    .flashRead(this, tableModel);
        });
    }//GEN-LAST:event_jButtonFlashReadActionPerformed

    private void jButtonFlashWriteActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFlashWriteActionPerformed
        CommPortIdentifier cpi = getCommPortIdentifier();
        executorService.execute(() -> {
            isStop = false;
            new ArduinoSpiEeprom(cpi)
                    .flashWrite(this, tableModel);
        });
    }//GEN-LAST:event_jButtonFlashWriteActionPerformed

    private void jButtonFlashTestActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFlashTestActionPerformed
        CommPortIdentifier cpi = getCommPortIdentifier();
        new ArduinoSpiEeprom(cpi)
                .flashInfo(this);
    }//GEN-LAST:event_jButtonFlashTestActionPerformed

    private void jButtonFlashVerifyActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFlashVerifyActionPerformed
        CommPortIdentifier cpi = getCommPortIdentifier();
        isStop = false;
        new ArduinoSpiEeprom(cpi)
                .flashVerify(this, tableModel);
    }//GEN-LAST:event_jButtonFlashVerifyActionPerformed

    private void jButtonFlashStopActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonFlashStopActionPerformed
        isStop = true;
    }//GEN-LAST:event_jButtonFlashStopActionPerformed

    boolean isStop() {
        return isStop;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainJFrame().setVisible(true);
        });
    }

    private void setColumnsWidth(JTable jTable1) {
        Enumeration<TableColumn> en = jTable1.getColumnModel().getColumns();
        if (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            tc.setMinWidth(80);
        }
        while (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            tc.setMinWidth(40);
        }
        jTable1.getSelectionModel().setSelectionInterval(1, 1);
    }

    private void addCommPorts(JComboBox<CommPortModel> jComboBox1) {
        Enumeration<CommPortIdentifier> en = CommPortIdentifier.getPortIdentifiers();
        while (en.hasMoreElements()) {
            CommPortIdentifier cpi = en.nextElement();
            jComboBox1.addItem(new CommPortModel(cpi));
        }

        if (jComboBox1.getItemCount() > 0) {
            jComboBoxCommPort.setSelectedIndex(0);
        } else {
            jButtonFlashErase.setEnabled(false);
            jButtonFlashRead.setEnabled(false);
            jButtonFlashWrite.setEnabled(false);
            jComboBoxCommPort.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButtonFlashErase;
    private JButton jButtonFlashRead;
    private JButton jButtonFlashWrite;
    private JComboBox<CommPortModel> jComboBoxCommPort;
    private JLabel jLabelInfo;
    private JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    private CommPortIdentifier getCommPortIdentifier() {
        int selectedIndex = jComboBoxCommPort.getSelectedIndex();
        return jComboBoxCommPort.getItemAt(selectedIndex).cpi;
    }

    void setInfo(String text) {
        jLabelInfo.setText(text);
    }

}
